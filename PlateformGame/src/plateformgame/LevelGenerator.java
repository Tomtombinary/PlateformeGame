/*
*  Copyright (C) 2014  Thomas DUBIER
* 
*    This file is part of PlateformGame.
*
*    PlateformGame is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    PlateformGame is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LevelGenerator.java
 *
 * Created on 13 sept. 2014, 14:01:22
 */
package plateformgame;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
/**
 *
 * @author thomas
 */
public class LevelGenerator extends javax.swing.JFrame implements MouseMotionListener,MouseListener{
    public static final int WIDTH=800,HEIGHT=600,XPAINT=10,YPAINT=60;
    final JFileChooser fc = new JFileChooser();
    int current_abscisse = 0;
    int current_ordonnee = 0;
    int mapSelector = 0;
    Image brique;
    
    ArrayList<Plateforme> pList = new ArrayList<Plateforme>();
    
    /** Creates new form LevelGenerator */
    public LevelGenerator() {
        initComponents();
        try{
            brique = ImageIO.read(this.getClass().getResource("Images/textures/brique.png"));
        }catch(Exception e){}
        addMouseMotionListener(this);
        addMouseListener(this);
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(Color.BLACK);
        g.drawString("Map selector : "+Integer.toString(mapSelector),XPAINT+100,YPAINT-10);
        g.setColor(Color.RED);
        g.fillRect(XPAINT,YPAINT,WIDTH,HEIGHT);
        g.drawImage(brique,XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32,null);
        drawPlateformes(g);
        drawQuadrillage(g);
    }
    
    public void drawQuadrillage(Graphics g){
        g.setColor(Color.BLACK);
        for(int i=0;i<WIDTH/32;i++){
            for(int j=0;j<HEIGHT/32;j++){
                g.drawRect(XPAINT+i*32,YPAINT+j*32,32,32);
            }
        }
    }
    
    public void drawPlateformes(Graphics g){
        for(int i=0;i<pList.size();i++){
            if(pList.get(i).map==mapSelector){
                pList.get(i).drawPlateforme((Graphics2D)g);
            }
        }
    }
    
    public void removeByXY(int x,int y){
        for(int i=0;i<pList.size();i++){
            if(pList.get(i).x==x && pList.get(i).y==y && pList.get(i).map==mapSelector){
                pList.remove(i);
                break;
            }
        }
    }
    
    public void addByXY(int x,int y){
        for(int i=0;i<pList.size();i++){
            if(pList.get(i).x==x && pList.get(i).y==y && pList.get(i).map==mapSelector){
                return;
            }
        }
        Plateforme p = new Plateforme(x,y,32,32);
        p.map = mapSelector;
        pList.add(p);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ActionNew = new javax.swing.JMenuItem();
        ActionSave = new javax.swing.JMenuItem();
        Charger = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ActionSuivant = new javax.swing.JMenuItem();
        ActionPrecedent = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(820, 660));
        getContentPane().setLayout(null);

        jMenu1.setText("Fichier");

        ActionNew.setText("Nouveau");
        ActionNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionNewActionPerformed(evt);
            }
        });
        jMenu1.add(ActionNew);

        ActionSave.setText("Sauvegarder");
        ActionSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionSaveActionPerformed(evt);
            }
        });
        jMenu1.add(ActionSave);

        Charger.setText("Charger");
        Charger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChargerActionPerformed(evt);
            }
        });
        jMenu1.add(Charger);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edition");

        ActionSuivant.setText("Suivant");
        ActionSuivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionSuivantActionPerformed(evt);
            }
        });
        jMenu2.add(ActionSuivant);

        ActionPrecedent.setText("Precedent");
        ActionPrecedent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPrecedentActionPerformed(evt);
            }
        });
        jMenu2.add(ActionPrecedent);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void ActionSuivantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionSuivantActionPerformed
    mapSelector++;
    repaint();
}//GEN-LAST:event_ActionSuivantActionPerformed

private void ActionPrecedentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionPrecedentActionPerformed
    mapSelector--;
    if(mapSelector<0)
        mapSelector=0;
    repaint();
}//GEN-LAST:event_ActionPrecedentActionPerformed

private void ActionNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionNewActionPerformed
    pList.removeAll(pList);
    mapSelector=0;
    repaint();
}//GEN-LAST:event_ActionNewActionPerformed

private void ActionSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionSaveActionPerformed
     int returnVal = fc.showSaveDialog(LevelGenerator.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            System.out.println("Enregistrer " + file.getName());
            try{
                String path=file.getAbsolutePath();
                if(!path.contains(".lvl"))
                    path+=".lvl";
                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path), "utf-8"));
                for(int i=0;i<pList.size();i++){
                    int argx = pList.get(i).x-XPAINT;
                    int argy = pList.get(i).y-YPAINT;
                    int argmap = pList.get(i).map;
                    String line = String.format("%d;%d;%d",argx,argy,argmap)+"\n";
                    writer.write(line);
                }
                writer.close();
            }catch(Exception e)
            {
                        
            }
            repaint();
        } else {
            System.out.println("Enregistrement annule");
        }
}//GEN-LAST:event_ActionSaveActionPerformed

private void ChargerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChargerActionPerformed
    int returnVal = fc.showOpenDialog(LevelGenerator.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            System.out.println("Ouvrir " + file.getName());
            try{
                pList.removeAll(pList);
                BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), "utf-8"));
                String line;
                while((line=reader.readLine())!=null){
                    String result[] = line.split(";");
                    if(result.length==3){
                        int x = Integer.parseInt(result[0])+XPAINT;
                        int y = Integer.parseInt(result[1])+YPAINT;
                        int map = Integer.parseInt(result[2]);
                        Plateforme p = new Plateforme(x,y,32,32);
                        p.map = map;
                        pList.add(p);
                    }
                }
                reader.close();
                mapSelector = 0;
                repaint();
            }catch(Exception e){
                
            }
        } else {
            System.out.println("Enregistrement annule");
        }
}//GEN-LAST:event_ChargerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LevelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LevelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LevelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LevelGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LevelGenerator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ActionNew;
    private javax.swing.JMenuItem ActionPrecedent;
    private javax.swing.JMenuItem ActionSave;
    private javax.swing.JMenuItem ActionSuivant;
    private javax.swing.JMenuItem Charger;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseDragged(MouseEvent arg0) {
        
    }

    @Override
    public void mouseMoved(MouseEvent arg0) {
        int x = arg0.getX();
        int y = arg0.getY();
        if(x>XPAINT && x<XPAINT+WIDTH && y>YPAINT && y<YPAINT+HEIGHT){
            if((x-XPAINT)/32!=current_abscisse || (y-YPAINT)/32!=current_ordonnee){
                repaint(XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32,32,32);
                current_abscisse = (x-XPAINT)/32;
                current_ordonnee = (y-YPAINT)/32;
                repaint(XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32,32,32);
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent arg0) {
        
    }

    @Override
    public void mousePressed(MouseEvent arg0) {
        if(arg0.getButton()==MouseEvent.BUTTON1)
            addByXY(XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32);
        else if(arg0.getButton()==MouseEvent.BUTTON3)
            removeByXY(XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32);
        repaint(XPAINT+current_abscisse*32,YPAINT+current_ordonnee*32,32,32);
    }

    @Override
    public void mouseReleased(MouseEvent arg0) {
       
    }

    @Override
    public void mouseEntered(MouseEvent arg0) {
        
    }

    @Override
    public void mouseExited(MouseEvent arg0) {
        
    }
}
